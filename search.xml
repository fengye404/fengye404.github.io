<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>类加载机制</title>
      <link href="/2024/12/31/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/12/31/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java为了做到“一次编写，到处运行”，发布了运行在不同平台上的JVM，所有平台上的JVM都支持统一的程序存储格式————字节码（ByteCode），而存储字节码的二进制文件被称为Class文件。</p><p>对于JVM来说，不管是什么语言，只要能编译成Class文件，就可以在JVM中运行。换句话说，JVM不与任何语言绑定，而是与Class文件绑定。</p><p>任何一个Class文件都对应一个唯一的类或者接口，但是类或接口不一定定义在文件中（例如可以动态生成）。</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209112229781.png" alt="image-20220911222923732"></p><p>Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这个过程被称作虚拟机的类加载机制。</p><h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><p>在学习类加载之前，需要先了解Class文件的结构。</p><p>首先给出一个简单的代码样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">inc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.server.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> arthas.grpc.unittest.ArthasUnittest;</span><br><span class="line"><span class="keyword">import</span> arthas.grpc.unittest.ArthasUnittestServiceGrpc;</span><br><span class="line"><span class="keyword">import</span> io.grpc.stub.StreamObserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: FengYe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2024/10/14 00:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: ArthasUnittestServiceImple</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArthasUnittestServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ArthasUnittestServiceGrpc</span>.ArthasUnittestServiceImplBase &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> StreamObserver&lt;ArthasUnittest.ArthasUnittestRequest&gt; clientStreamSum(StreamObserver&lt;ArthasUnittest.ArthasUnittestResponse&gt; responseObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StreamObserver</span>&lt;ArthasUnittest.ArthasUnittestRequest&gt;() &#123;</span><br><span class="line">            <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">messages</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(ArthasUnittest.ArthasUnittestRequest request)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    atomicInteger.addAndGet(request.getNum());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable t)</span> &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;Error: &quot;</span> + t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompleted</span><span class="params">()</span> &#123;</span><br><span class="line">                ArthasUnittest.<span class="type">ArthasUnittestResponse</span> <span class="variable">response</span> <span class="operator">=</span> ArthasUnittest.ArthasUnittestResponse.newBuilder()</span><br><span class="line">                        .setNum(atomicInteger.get())</span><br><span class="line">                        .build();</span><br><span class="line">                responseObserver.onNext(response);</span><br><span class="line">                responseObserver.onCompleted();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serverStream</span><span class="params">(ArthasUnittest.ArthasUnittestRequest request, StreamObserver&lt;ArthasUnittest.ArthasUnittestResponse&gt; responseObserver)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            ArthasUnittest.<span class="type">ArthasUnittestResponse</span> <span class="variable">response</span> <span class="operator">=</span> ArthasUnittest.ArthasUnittestResponse.newBuilder()</span><br><span class="line">                    .setMessage(<span class="string">&quot;Server response &quot;</span> + i + <span class="string">&quot; to &quot;</span> + request.getMessage())</span><br><span class="line">                    .build();</span><br><span class="line">            responseObserver.onNext(response);</span><br><span class="line">        &#125;</span><br><span class="line">        responseObserver.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> StreamObserver&lt;ArthasUnittest.ArthasUnittestRequest&gt; biStream(StreamObserver&lt;ArthasUnittest.ArthasUnittestResponse&gt; responseObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StreamObserver</span>&lt;ArthasUnittest.ArthasUnittestRequest&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(ArthasUnittest.ArthasUnittestRequest message)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Received message: &quot;</span> + message.getMessage());</span><br><span class="line">                <span class="comment">// Echo the message back to the client</span></span><br><span class="line">                responseObserver.onNext(ArthasUnittest.ArthasUnittestResponse.newBuilder()</span><br><span class="line">                        .setMessage(message.getMessage())</span><br><span class="line">                        .build());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable t)</span> &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;Error: &quot;</span> + t.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompleted</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Client has completed the chat.&quot;</span>);</span><br><span class="line">                responseObserver.onCompleted();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 <code>javac TestClass.java</code> 对其编译后，生成了一个名为 <code>TestClass.class</code> 的文件。使用16进制编辑器打开后，内容如下：</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209052036337.png" alt="img"></p><p>后续的讲解都基于这个例子。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Class文件是一组以<strong>8个字节为基础</strong>的<strong>二进制</strong>流，各个数据项目严格按照顺序紧凑地排列在文件之中，中间没有添加任何分隔符。</p><p>在Class文件中，只有两种数据类型————“<strong>无符号数</strong>”和“<strong>表</strong>”</p><ul><li>无符号数：分为<strong>u1、u2、u4、u8</strong>，表示占用1个字节、2个字节、4个字节、8个字节。无符号数可以用来描述数字、索引引用、数量值或者UTF8字符串。</li><li>表：由多个无符号数或者其他表构成，用于描述由层次关系的复合结构的数据。为了便于区分，所有表的命名都习惯性地用“_info”结尾。</li></ul><p>本质上，整个Class文件也是一个表，其结构如下： </p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209052005663.png" alt="image-20220905200506578"></p><p>无论是无符号数还是表，当需要描述同一类型但<strong>数量不定</strong>的多个数据时，经常会使用一个<strong>前置的容量计数器</strong>加<strong>若干个连续的数据项</strong>的形式，这时候称这一系列连续的某一类型的数据为某一类型的“<strong>集合</strong>”。</p><h3 id="魔数"><a href="#魔数" class="headerlink" title="魔数"></a>魔数</h3><p>Class文件开头的第一个u4无符号数（magic）被称为魔数，用于标识这是一个Class类型的文件。</p><p>Class文件的魔数内容为 <code>0xCAFEBABE</code> 。</p><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>紧接着魔数，后面的一个u2无符号数（minor_version）是次版本号；第二个u2无符号数（major_version）是主版本号。</p><p>JDK1的主版本号为45，每个大版本发布后都会+1；例如JDK17的主版本号为 <code>0x3D</code> ，即61。</p><p>高版本的JDK可以向下兼容以前版本的Class文件。</p><p>次版本号在JDK1时曾经被使用过，后来直到JDK12之前均为使用，全部固定为0。到了JDK12时期，由于JDK新特性越来越多，次版本号又被启用。</p><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p>版本号之后的是常量池（constant_pool）。常量池可以比喻为Class文件里的资源仓库，它是Class文件结构中与其他项目关联最多的数据，通常也是占用Class文件空间最大的数据项目之一。由于常量池的数量不固定，因此常量池的入口前需要加一个u2无符号数（constant_pool_count，计数从1开始）表示常量池的容量。</p><p>常量池中主要存放两大类常量：<strong>字面量</strong>和<strong>符号引用</strong>。字面量比较接近于Java语言层面的常量概念，如文本字符串、被声明为final的常量值等。而符号引用则属于编译原理方面的概念。</p><p>常量池中的每个常量都是一个表，并且结构各不相同。每个常量有个共同特点，表结构起始的第一位是一个u1的标志位，表示当前常量属于哪种常量类型。</p><p>常量池中的元素的类型如下：</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209112230895.png" alt="image-20220911223018824"></p><h3 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h3><p>常量池之后的一个u2无符号数（access_flags）表示访问标志，用于标识类或接口层次的访问信息。它的值是各个标志值的或运算结果。</p><p>例如 access_flags &#x3D; <code>0x0011 = 0x0001 | 0x0010</code>，则表示 <code>public</code> 和 <code>final</code> 。</p><p>访问标志类型：</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209112230468.png" alt="image-20220911223045415"></p><h3 id="类索引、父类索引与接口索引集合"><a href="#类索引、父类索引与接口索引集合" class="headerlink" title="类索引、父类索引与接口索引集合"></a>类索引、父类索引与接口索引集合</h3><p>访问标志后的是类索引（this_class）、父类索引（super_class）和接口索引（interfaces）。类索引和父类索引是u2类型的数据，而接口索引集合是一组u2类型的索引。</p><p>它们各自指向一个类型为CONSTANT_class_info类型的常量；类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名，接口索引用于确定这个类实现或继承的接口的全限定名。</p><h3 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h3><p>在此之后的是u2类型的字段表集合（fields_count和fields）。字段表集合中的每一个元素被称为字段表，用于描述一个字段（即声明在接口或类中的变量，Java语言中的字段包括类级变量和实例级变量）。</p><p>字段表的结构：</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209112232182.png" alt="image-20220911223227149"></p><p>字段表中也有access_flags，它与类中的access_flags非常类似，具体如下：</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209112233674.png" alt="image-20220911223316529"></p><p>在access_flags后的是两项索引值：name_index和descriptor_index。它们都是对常量池项的引用，分别代表着字段的简单名称以及字段和方法的描述符。</p><blockquote><p>全限定名：把类全名中的<code>&#39;.&#39;</code>替换为<code>&#39;/&#39;</code>，例如<code>com.example.demo.TestClass</code>的全限定名为<code>com/example/demo/TestClass</code></p><p>简单名称：没有类型和参数修饰的方法或者字段名称</p><p>描述符：描述<strong>字段的数据类型</strong>、<strong>方法的参数列表和返回值</strong>。根据描述符规则，基本数据类型（byte、char、double、float、int、long、short、boolean）以及代表无返回值的void类型都用一个大写字符来表示，而对象类型则用字符L加对象的全限定名来表示</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209130154204.png" alt="image-20220913015434129"></p><p>对于数组类型，每一维度将使用一个前置的“[”字符来描述，如一个定义为“java.lang.String[][]”类型的二维数组将被记录成“[[Ljava&#x2F;lang&#x2F;String；”，一个整型数组“int[]”将被记录成“[I”。</p><p>用描述符来描述方法时，按照先参数列表、后返回值的顺序描述，参数列表按照参数的严格顺序放在一组小括号“()”之内。如方法void inc()的描述符为“()V”，方法java.lang.String toString()的描述符为“()Ljava&#x2F;lang&#x2F;String；”，方法<code>int indexOf(char[]source，int sourceOffset，int sourceCount，char[]target，int targetOffset，int targetCount，int fromIndex)</code>的描述符为“([CII[CIII)I”。</p></blockquote><p>字段表的最后是一个属性表集合，用于存放字段的具体数值（具体内容将在后面提及）。</p><h3 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h3><p>方法表集合（methods_count和methods）和字段表集合基本一致，仅在访问标志和属性表中有所差异。例如volatile不能用于修饰方法等等。</p><p>字段表的最后也是一个属性表集合，用于存放方法中的的具体实现（具体内容将在后面提及）。</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209130210853.png" alt="image-20220913021049815"></p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209130212244.png" alt="image-20220913021245195"></p><h3 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h3><p>在Class文件的最后，是一个属性表组成的集合（attributes_counts和attributes）。</p><p>属性表集合在之前的字段表和方法表中也有出现。</p><p>与Class文件中的其他数据项目不同，属性表并没有严格的顺序、长度、内容要求，并且只要不与已存在的属性名重复，任何人实现的编译器都可以向属性表中写入自己定义的属性信息，Java虚拟机运行时会忽略掉它不认识的属性。为了能正确解析Class文件，JVM规范中预定义了一些属性，只需了解一些其中常用的即可。</p><p>每一个属性的结构如下：</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209130221460.png" alt="image-20220913022156428"></p><ul><li>attribute_name_index: 引用常量池中的一个 CONSTANT_Utf8_info 类型的常量作为名称</li><li>attribute_length: 属性值占用的位数</li><li>info: 自定义的属性值</li></ul><h4 id="Code属性"><a href="#Code属性" class="headerlink" title="Code属性"></a>Code属性</h4><p>Code属性出现在方法表的属性集合中（并非所有的方法表都必须存在这个属性，譬如接口或者抽象类中的方法就不存在Code属性）。Code属性主要用于存放经过编译器处理后的<strong>方法体</strong></p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209191507420.png" alt="image-20220919150756350"></p><ul><li>attribute_name_index: 指向CONSTANT_Utf8_info型常量，固定为”Code”，表示这个属性的名称是Code。</li><li>attribute_length: 属性值的长度（属性表长度-6byte）。</li><li>max_stack: 操作数栈最大深度。</li><li>max_locals: 局部变量所需的存储空间。</li><li>code_length: 方法体编译后的字节码的长度。</li><li>code: 存储方法体编译后的<strong>字节码指令</strong>。</li><li>exception_table_length: 异常表长度。</li><li>exception_table: 异常表。</li></ul><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209191627689.png" alt="image-20220919162738642"></p><p>异常表描述的是try-catch的过程：如果当字节码从第start_pc行到第end_pc行之间（不含第end_pc行）出现了类型为catch_type或者其子类的异常（catch_type为指向一个CONSTANT_Class_info型常量的索引），则转到第handler_pc行继续处理。当catch_type的值为0时，代表任意异常情况都需要转到handler_pc处进行处理。</p><h4 id="Exception属性"><a href="#Exception属性" class="headerlink" title="Exception属性"></a>Exception属性</h4><p>Code属性出现在方法表的属性集合中，用于列举方法中可能抛出的异常（即throws关键字后的异常）</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209191709802.png" alt="image-20220919170919754"></p><ul><li>execption_index_table: 指向常量池中的CONSTANT_Class_info型常量的索引。</li></ul><h4 id="ConstantValue属性"><a href="#ConstantValue属性" class="headerlink" title="ConstantValue属性"></a>ConstantValue属性</h4><p>ConstantValue属性的作用是通知虚拟机自动为静态变量赋值。只有被static关键字修饰的变量（类变量）才可以使用这项属性。</p><p>在Java中，用不同的方式定义的变量的赋值方式和时机都会不同。对于非static变量的赋值是在实例构造器<code>&lt;init&gt;()</code>方法中进行的；对于static变量，可以在类构造器<code>&lt;clinit&gt;()</code>中赋值或用ConstantValue属性赋值。</p><p>目前Oracle的Javac编译期的逻辑是：<strong>如果某个变量被static和final修饰，并且它的类型是基本数据类型或者String的话，就会将其认定为常量，生成ConstantValue属性来对其进行初始化。</strong></p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209191829260.png" alt="image-20220919182919149"></p><ul><li>attribute_length: 固定为2</li><li>constantvalue_index: 指向常量池中的一个常量</li></ul><blockquote><p>自行了解属性表参考：<a href="https://blog.csdn.net/qq_38526573/article/details/88541241">Class文件结构介绍属性表集合-CSDN博客</a></p></blockquote><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>与在编译时期进行连接的语言不同，在Java中，类型的加载，连接和初始化都是在程序运行期间完成的。这种策略让Java很难提前编译，并且会增加</p><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p>一个类型（类和接口）从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期将会经历<strong>加载</strong>（Loading）、<strong>验证</strong>（Verification）、<strong>准备</strong>（Preparation）、<strong>解析</strong>（Resolution）、<strong>初始化</strong>（Initialization）、<strong>使用</strong>（Using）和<strong>卸载</strong>（Unloading）七个阶段，其中验证、准备、解析三个部分统称为<strong>连接</strong>（Linking）。</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209171626736.png" alt="image-20220917162623677"></p><h3 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h3><p>《JVM规范》中没有对类加载的第一个阶段“<strong>加载</strong>”进行强制约束，可以由虚拟机自由把握。但是《JVM规范》对与“<strong>初始化</strong>”有着严格规定，规定以下六种情况下必须立即对类进行“<strong>初始化</strong>”（“<strong>加载</strong>”和“<strong>连接</strong>”会在此之前执行）：</p><ol><li>遇到new、getstatic、putstatic或invokestatic这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化。能够生成这四条指令的Java代码场景有：<ul><li>使用 new 关键字实例化对象</li><li>读取或设置类型的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）</li><li>调用一个类型的静态方法</li></ul></li><li>使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行过初始化，则需要先触发其初始化。</li><li>当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先 初始化这个主类。</li><li>当一个接口中定义了JDK8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</li><li>当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。</li></ol><p>在《JVM规范》中，规定了“<strong>有且只有</strong>”这六种场景会触发初始化，这六种场景被称为<strong>主动引用</strong>。除此以外，其他引用的方式被称为<strong>被动引用</strong>，不会触发其初始化。</p><h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>加载是整个类加载过程的第一个阶段。在这个阶段，JVM需要完成三件事：</p><ol><li>通过一个类的全限定名获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</li></ol><p>加载阶段结束后，JVM外部的二进制字节流就按照虚拟机所设定的格式存储在方法区之中了。类型数据安置在方法区之后，会在Java堆内存中实例化一个java.lang.Class类的对象，这个对象将作为程序访问方法区中的类型数据的外部接口。</p><p>加载阶段与连接阶段的部分动作（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的一部分，这两个阶段的开始时间仍然保持着固定的先后顺序。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>验证是连接阶段的第一个步骤，目的是为了确保Class文件的字节流中包含的信息符合《JVM规范》的约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。</p><p>验证阶段大致上分为下面四个阶段的检验动作：</p><h5 id="文件格式验证"><a href="#文件格式验证" class="headerlink" title="文件格式验证"></a>文件格式验证</h5><p>验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。</p><p>包括：</p><ul><li>是否以魔数0xCAFEBABE开头。</li><li>主、次版本号是否在当前Java虚拟机接受范围之内。</li><li>是否有其他不符合Class文件规范要求的数据。</li></ul><p>前面提到过，加载阶段和连接阶段的部分动作是交叉进行的。这阶段的验证是基于二进制字节流进行的，只有通过了这个阶段的验证之后，这段字节流才被允许进入Java虚拟机内存的方法区中进行存储，所以后面的三个验证阶段全部是基于方法区的存储结构上进行的，不会再直接读取、操作字节流了。</p><h5 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a>元数据验证</h5><p>对字节码描述的元数据信息进行语义分析，保证其描述的信息符合Java语言规范的要求（验证元数据的语法）。</p><p>包括：</p><ul><li>这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。</li><li>这个类的父类是否继承了不允许被继承的类（被final修饰的类）。</li><li>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。</li><li>类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。</li><li>…</li></ul><h5 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h5><p>对类的方法体（Class文件中的Code属性）进行校验分析。</p><h5 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a>符号引用验证</h5><p>符号引用验证可以看作是对类自身以外（常量池中的各种符号引用）的各类信息进行匹配性校验，通俗来说就是，该类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源。</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>准备阶段是正式为类变量（static变量）分配内存并设置初始值（零值）的阶段。这些变量使用的内存在方法区中分配。</p><p>需要强调两点：</p><ol><li>准备阶段只会给类变量分配内存，而不包括实例变量。</li><li>通常情况下设置的初始值指的是零值。</li></ol><blockquote><p>赋零值是通常情况下的做法。</p><p>例如 <code>public static int value = 123;</code> 其中的 value 在准备阶段之后的值为 0 。</p><p>但是如果是 <code>public static int value = 123;</code> javac在编译这段代码后会为 value 生成常量属性，在准备阶段之后会直接赋值为 123 。</p></blockquote><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209181856295.png" alt="image-20220918185626238"></p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析阶段是JVM将常量池内的符号引用替换为直接引用的过程。</p><blockquote><p>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用的字面量形式在《JVM规范》中有明确定义，因此各个虚拟机能接受的符号引用必须一致。</p><p>直接引用：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用和虚拟机的内存布局直接相关，同一个符号引用在不同虚拟机上翻译出来的直接引用不一定相同。</p></blockquote><p>《JVM规范》没有严格规定解析阶段发生的具体时间，JVM可以根据需要自行判断到底是在类被加载器加载时就对常量池中的符号引用进行解析，还是等到一个符号引用将要被使用前才去解析它。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>类的初始化是类加载过程的最后一步。</p><p>在准备阶段时，变量已经赋过一次零值了，而在初始化阶段，则会根据程序中编写的值进行初始化。换句话说，初始化阶段就是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。</p><p><code>&lt;clinit&gt;()</code>方法是Javac编译器自动产生的。编译器会自动收集类中的所有<strong>类变量的赋值语句</strong>和<strong>静态语句</strong>，并将其合并成<code>&lt;clinit&gt;()</code>方法。</p><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>在前面的类加载过程中，第一步的加载阶段就是由类加载器实现的。</p><p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远超类加载阶段。对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性。</p><h4 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h4><p>对于JVM来说，只存在两种不同的类加载器：</p><ul><li>启动类加载器：用C++实现，是JVM的一部分。</li><li>其他类加载器：用Java实现，独立在JVM外部，并且全部继承自<code>Java.lang.ClassLoader</code>。</li></ul><p>对于Java开发者来说，类加载器可以分为三层架构和<strong>双亲委派</strong>模型：</p><ul><li>启动类加载器（Bootstrap Class Loader）：负责加载<code>&lt;JAVA_HOME&gt;\lib</code>目录或者被<code>-Xbootclasspath</code>参数所指定的路径中存放的类库。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器处理，那直接使用null代替即可。</li><li>扩展类加载器（Extension Class Loader）：在类 sun.misc.Launcher$ExtClassLoader 中以Java代码的形式实现。负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录或者被<code>java.ext.dirs</code>系统变量所指定的路径中存放的类库。通过这个加载器，用户可以把一些具有通用性的类库放在ext目录中以拓展JDK的功能。在JDK9之后，这种扩展机制被JDK的模块化功能的扩展机制所取代。由于扩展类加载器是由Java代码实现的，开发者可以直接在程序中使用扩展类加载器来加载Class文件。</li><li>应用程序类加载器（Application Class Loader）：在类 sun.misc.Launcher$AppClassLoader 中实现。由于可以用<code>ClassLoader.getSystemClassLoader()</code>来获取，因此也被称为系统类加载器。它负责加载用户类路径（ClassPath）里的所有类库。开发者也可以直接在代码中使用应用程序类加载器，并且如果没有显示指定其他类加载器，一般情况下这个类加载器就是程序中默认的类加载器。</li></ul><h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p>JDK9之前的Java应用程序都是由这三种类加载器互相配合完成加载的，用户也可以加入自定义的类加载器进行拓展。这些类加载器的协作关系如图：</p><p><img src="https://fengye404-blog-1304674306.cos.ap-nanjing.myqcloud.com/img/202209202117172.png" alt="image-20220920211752097"></p><p>这种类加载器之间的层次关系就被称为类加载器的“双亲委派模型”。“双亲委派模型”要求除了顶层的启动类加载器外，其余的类加载器都应该有自己的父类加载器。</p><p>“双亲委派模型”加载一个类的过程：如果一个类加载器收到了类加载的请求，它并不会首先自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，并且每一个层次的类加载器都是如此。因此所有的加载请求最终都会被传送到最顶层的启动类加载器中。只有父加载器无法完成这个加载请求，子加载器才会开始尝试自己去完成加载。</p><p>好处：前面提到过每个类的唯一性都需要这个类本身和它的加载器共同确立。在类加载器加载类时，会根据这个唯一性来确保让每个类只被加载一次，不会被重复加载。使用了双亲委派模型后，就可以让核心类（例如String）都用最顶层的启动类加载器加载，从而使得核心类不会被恶意篡改。</p><blockquote><p>参考：<a href="https://blog.csdn.net/javazejian/article/details/73413292?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~Rate-4-73413292-blog-48626159.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~Rate-4-73413292-blog-48626159.pc_relevant_default&utm_relevant_index=5">深入理解Java类加载器(ClassLoader)-CSDN博客</a></p></blockquote><blockquote><p>全文参考：《深入理解Java虚拟机-第三版》</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/12/31/hello-world/"/>
      <url>/2024/12/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
